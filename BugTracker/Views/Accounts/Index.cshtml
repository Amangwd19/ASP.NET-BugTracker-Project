
@{
    ViewBag.Title = "Index";
}

 
<!doctype html>
<html>
<head>
    <meta charset="utf-8"/>
    <title>Bug Tracker </title>
    <link rel="stylesheet" href="~/Style/Style2.css" />
    <link rel="stylesheet" href="~/Style/Style3.css" />
</head>
<body>
        

                <section>
                    <video src="~/Content/src/d.mp4" autoplay="" muted="" loop=""></video>
                </section>
                <section>
                    <div class="content">
                        <h2>
                            Bug Tracker
                        </h2>
                        <p>Bug Tracker will resolve the error.Step into the system.</p>

                        <a href="/Accounts/Login"> Login </a>
                        <a href="#"> Register </a>
                        <p>
                            The Year 2000 problem, also known as the Y2K problem, the Millennium bug, Y2K bug, the Y2K glitch, or Y2K, refers to events related to the formatting and storage of calendar data for dates beginning in the year 2000. Problems were anticipated, and arose, because many programs represented four-digit years with only the final two digits – making the year 2000 indistinguishable from 1900. The assumption of a twentieth-century date in such programs could cause various errors, such as the incorrect display of dates and the inaccurate ordering of automated dated records or real-time events.

                            In 1997, the British Standards Institute (BSI) developed standard DISC PD2000-1 defining "Year 2000 Conformity requirements" as four rules:

                            No valid date will cause any interruption in operations.
                            Date-based functionality must behave consistently for dates prior to, during and after year 2000.
                            In all interfaces and in all storage, the century must be unambiguous, either specified, or calculable by algorithm.
                            Year 2000 must be recognised as a leap year.
                            It identifies two problems that might exist in many computer programs. First, the practice of representing the year with two digits became problematic with logical error(s) arising upon "rollover" from xx99 to xx00. This had caused some date-related processing to operate incorrectly for dates and times on and after 1 January 2000, and on other critical dates which were billed "event horizons". Without corrective action, long-working systems would break down when the "... 97, 98, 99, 00 ..." ascending numbering assumption suddenly became invalid.

                            Secondly, some programmers had misunderstood the Gregorian calendar rule that states years that are exactly divisible by 100 are not leap years, assuming that the year 2000 would not be a leap year. While this is true, there is an exception that states years divisible by 400 are leap years – thus making 2000 a leap year.

                            Correcting all of this, however, was not the largest part of the problem. By 1997, AT&T had estimated that "60% of the time and money needed for its total compliance efforts" would be devoted to testing the source code changes made to address the issue.

                            Companies and organisations in some countries, but not all, checked, fixed, and upgraded their computer systems to address the anticipated problem.Very few computer failures were reported when the clocks rolled over into 2000.
                        </p>
                    </div>

                </section>
                <script type="text/javascript">
                    let video = document.querySelector('video');
                    window.addEventListener('scroll', function () {
                        let value = 1 + window.scrollY / -600;
                        video.style.opacity = value;
                    })
                </script>
                <script type="text/javascript">
                    const buttons = document.querySelectorAll('a');
                    buttons.forEach(btn => {
                        btn.addEventListener('click', function (e) {
                            let x = e.clientX - e.target.offsetLeft;
                            let y = e.clientY - e.target.offsetTop;
                            let ripples = document.createElement('span');
                            ripples.style.left = x + 'px';
                            ripples.style.top = x + 'px';
                            this.appendChild(ripples);

                            setTimeOut(() => {
                                ripples.remove()
                            }, 1000);
                        })
                    })

                </script>

</body>
</html>
